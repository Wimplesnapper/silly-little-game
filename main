import pygame
import sys
import random

pygame.init()

# --- Constants ---
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
FPS = 60

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 100, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
CYAN = (0, 255, 255)

# --- Setup ---
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Coolest endless platformer game")
clock = pygame.time.Clock()

# --- Player ---
player_width = 60
player_height = 60
player_x = 100
player_y = SCREEN_HEIGHT - player_height - 40
player_vel_x = 0
player_vel_y = 0
player_speed = 5
jump_strength = -13
gravity = 1
on_ground = False

# --- Jump tracking ---
jumps_made = 0
jump_pressed = False

# --- Camera ---
camera_x = 0
CAMERA_LERP = 0.1

# --- World ---
platforms = []
score_zones = []
spikes = []
enemies = []
powerups = []

score = 0
next_zone_x = 700
world_end_x = 2000

# --- Power-up states ---
player_big = False
big_timer = 0
big_idle_timer = 0

double_jump_disabled = False
double_jump_timer = 0
double_jump_idle_timer = 0

# --- Instructions ---
instruction_timer = 0
instructions_to_show = []
seen_big_instructions = False
seen_double_jump_instructions = False

font = pygame.font.SysFont(None, 36)

platform_idle_timer = 0
current_platform_under_player = None


def reset_game():
    global player_x, player_y, player_vel_x, player_vel_y
    global platforms, spikes, enemies, score_zones, score, next_zone_x, world_end_x
    global camera_x, jumps_made, jump_pressed
    global powerups, player_big, big_timer, big_idle_timer
    global double_jump_disabled, double_jump_timer, double_jump_idle_timer
    global instruction_timer, instructions_to_show
    global seen_big_instructions, seen_double_jump_instructions
    global platform_idle_timer, current_platform_under_player

    player_x = 100
    player_y = SCREEN_HEIGHT - player_height - 40
    player_vel_x = 0
    player_vel_y = 0
    jumps_made = 0
    jump_pressed = False
    camera_x = 0

    score = 0
    next_zone_x = 700
    world_end_x = 2000

    platforms.clear()
    platforms.append(pygame.Rect(0, SCREEN_HEIGHT - 40, 2000, 40))
    score_zones.clear()
    spikes.clear()
    enemies.clear()
    powerups.clear()

    player_big = False
    big_timer = 0
    big_idle_timer = 0

    double_jump_disabled = False
    double_jump_timer = 0
    double_jump_idle_timer = 0

    instruction_timer = FPS * 5
    instructions_to_show[:] = [
        "Use WASD to move",
        "Press W to jump",
        "You can double jump!"
    ]

    seen_big_instructions = False
    seen_double_jump_instructions = False

    platform_idle_timer = 0
    current_platform_under_player = None

    generate_next_section()


def generate_next_section():
    global next_zone_x, world_end_x, platforms, score_zones, spikes, enemies, powerups, score

    difficulty = score ** 0.7
    platform_gap = 180 + min(difficulty * 3, 80)
    spike_chance = min(int(difficulty * 5), 50)
    enemy_chance = min(int(difficulty * 3), 40)

    for _ in range(3):
        plat_width = random.randint(150, 250)
        plat_x = world_end_x + random.randint(80, int(platform_gap))
        plat_y = random.randint(SCREEN_HEIGHT - 180, SCREEN_HEIGHT - 100)
        platforms.append(pygame.Rect(plat_x, plat_y, plat_width, 20))
        world_end_x = plat_x + plat_width

        if random.randint(1, 100) <= spike_chance:
            spike_x = plat_x + random.randint(10, plat_width - 30)
            spikes.append(pygame.Rect(spike_x, plat_y - 20, 20, 20))

        if random.randint(1, 100) <= enemy_chance:
            enemy_width = 40
            enemy_height = 40
            enemy_x = plat_x + random.randint(10, plat_width - enemy_width - 10)
            enemy_y = plat_y - enemy_height
            enemy_speed = 2 + difficulty * 0.1
            enemies.append({
                "rect": pygame.Rect(enemy_x, enemy_y, enemy_width, enemy_height),
                "speed": enemy_speed,
                "direction": 1,
                "platform_x": plat_x,
                "platform_width": plat_width
            })

        # Spawn two types of powerups randomly
        if random.randint(1, 100) <= 4:
            powerup_x = plat_x + random.randint(10, plat_width - 20)
            powerup_y = plat_y - 30
            powerup_type = random.choice(["big", "no_double_jump"])
            powerups.append({"rect": pygame.Rect(powerup_x, powerup_y, 20, 20), "type": powerup_type})

        score_zones.append(pygame.Rect(next_zone_x, 0, 20, SCREEN_HEIGHT))
        next_zone_x += 500


reset_game()

running = True
while running:
    clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_w:
                max_jumps = 1 if double_jump_disabled else 2
                if jumps_made < max_jumps and not jump_pressed:
                    player_vel_y = jump_strength
                    jumps_made += 1
                    jump_pressed = True

        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_w:
                jump_pressed = False

    keys = pygame.key.get_pressed()
    player_vel_x = 0

    # Idle timers for both power-ups (move or die)
    if player_big:
        if keys[pygame.K_a] or keys[pygame.K_d]:
            big_idle_timer = 0
        else:
            big_idle_timer += 1
            if big_idle_timer >= 300:
                print("You were idle too long while BIG!")
                reset_game()
                continue

    if double_jump_disabled:
        if keys[pygame.K_a] or keys[pygame.K_d]:
            double_jump_idle_timer = 0
        else:
            double_jump_idle_timer += 1
            if double_jump_idle_timer >= 300:
                print("You were idle too long while DOUBLE JUMP DISABLED!")
                reset_game()
                continue

    if keys[pygame.K_a]:
        player_vel_x = -player_speed
    if keys[pygame.K_d]:
        player_vel_x = player_speed

    player_x += player_vel_x
    player_vel_y += gravity
    player_y += player_vel_y

    if player_x < 0:
        player_x = 0

    # Player rect size depends only on BIG power-up
    if player_big:
        player_rect = pygame.Rect(player_x, player_y, int(player_width * 1.5), int(player_height * 1.5))
    else:
        player_rect = pygame.Rect(player_x, player_y, player_width, player_height)

    on_ground = False
    current_touching_platform = None

    for plat in platforms:
        if player_rect.colliderect(plat):
            if player_vel_y > 0:
                player_y = plat.top - player_rect.height
                player_vel_y = 0
                on_ground = True
                jumps_made = 0
                player_rect.y = player_y
                current_touching_platform = plat
                break

    # Platform removal when big and idle too long
    if player_big and on_ground:
        if current_platform_under_player is None:
            current_platform_under_player = current_touching_platform
            platform_idle_timer = 0
        elif current_touching_platform == current_platform_under_player:
            platform_idle_timer += 1
            if platform_idle_timer >= 300:
                print("Platform removed for idling too long while BIG!")
                if current_platform_under_player in platforms:
                    platforms.remove(current_platform_under_player)
                current_platform_under_player = None
                platform_idle_timer = 0
        else:
            current_platform_under_player = current_touching_platform
            platform_idle_timer = 0
    else:
        current_platform_under_player = None
        platform_idle_timer = 0

    # Score zones
    for zone in score_zones[:]:
        if player_rect.colliderect(zone):
            score += 1
            score_zones.remove(zone)

    # Spikes collision
    for spike in spikes:
        if player_rect.colliderect(spike):
            print("You died from spikes!")
            reset_game()
            break

    # Enemies update and collision
    for enemy in enemies:
        enemy_rect = enemy["rect"]
        enemy_rect.x += enemy["speed"] * enemy["direction"]

        if enemy_rect.left < enemy["platform_x"] or enemy_rect.right > enemy["platform_x"] + enemy["platform_width"]:
            enemy["direction"] *= -1

        if player_rect.colliderect(enemy_rect):
            print("You died from an enemy!")
            reset_game()
            break

    # Power-up pickup
    for p in powerups[:]:
        if player_rect.colliderect(p["rect"]):
            powerups.remove(p)
            if p["type"] == "big" and not player_big:
                print("You picked up the BIG power-up!")
                player_big = True
                big_timer = 1800
                big_idle_timer = 0

                if not seen_big_instructions:
                    instructions_to_show = [
                        "You are THICC!",
                        "Don't stay still while THICC or else die!",
                        "You can still double jump!"
                    ]
                    instruction_timer = FPS * 5
                    seen_big_instructions = True
            elif p["type"] == "no_double_jump" and not double_jump_disabled:
                print("You picked up the NO DOUBLE JUMP power-up!")
                double_jump_disabled = True
                double_jump_timer = 1800
                double_jump_idle_timer = 0

                if not seen_double_jump_instructions:
                    instructions_to_show = [
                        "Double jump disabled!",
                        "Don't stay still or die!",
                        "Only 1 jump now!"
                    ]
                    instruction_timer = FPS * 5
                    seen_double_jump_instructions = True

    # Fell off screen
    if player_y > SCREEN_HEIGHT + 100:
        print("You fell!")
        reset_game()

    # Timers countdown
    if player_big:
        big_timer -= 1
        if big_timer <= 0:
            player_big = False
            print("Big power-up wore off!")

    if double_jump_disabled:
        double_jump_timer -= 1
        if double_jump_timer <= 0:
            double_jump_disabled = False
            print("Double jump restored!")

    if instruction_timer > 0:
        instruction_timer -= 1

    # Camera follow
    camera_target = player_x - SCREEN_WIDTH // 2 + player_rect.width // 2
    camera_x += (camera_target - camera_x) * CAMERA_LERP

    if world_end_x - player_x < 1000:
        generate_next_section()

    # Drawing
    screen.fill(BLACK)
    for plat in platforms:
        pygame.draw.rect(screen, WHITE, pygame.Rect(plat.x - camera_x, plat.y, plat.width, plat.height))
    for spike in spikes:
        pygame.draw.rect(screen, RED, pygame.Rect(spike.x - camera_x, spike.y, spike.width, spike.height))
    for enemy in enemies:
        pygame.draw.rect(screen, RED, pygame.Rect(enemy["rect"].x - camera_x, enemy["rect"].y, enemy["rect"].width, enemy["rect"].height))
    for p in powerups:
        color = CYAN if p["type"] == "big" else GREEN
        pygame.draw.rect(screen, color, pygame.Rect(p["rect"].x - camera_x, p["rect"].y, p["rect"].width, p["rect"].height))

    if player_big:
        pygame.draw.rect(screen, BLUE, pygame.Rect(player_x - camera_x, player_y, int(player_width * 1.5), int(player_height * 1.5)))
    else:
        pygame.draw.rect(screen, BLUE, pygame.Rect(player_x - camera_x, player_y, player_width, player_height))

    # Score
    score_text = font.render(f"Score: {score}", True, GREEN)
    screen.blit(score_text, (10, 10))

    # Instructions
    if instruction_timer > 0:
        for i, text in enumerate(instructions_to_show):
            msg = font.render(text, True, WHITE)
            screen.blit(msg, (10, 50 + i * 30))

    # Power-up timers display
    base_y = 50 + (len(instructions_to_show) * 30 if instruction_timer > 0 else 0)
    if player_big:
        seconds_left = big_timer // FPS
        timer_text = font.render(f"BIG power-up time: {seconds_left}s", True, CYAN)
        screen.blit(timer_text, (10, base_y))
        base_y += 30
    if double_jump_disabled:
        seconds_left = double_jump_timer // FPS
        timer_text = font.render(f"No Double Jump time: {seconds_left}s", True, GREEN)
        screen.blit(timer_text, (10, base_y))

    pygame.display.flip()

pygame.quit()
sys.exit()
